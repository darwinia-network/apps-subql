specVersion: 1.0.0
name: apps-subql
version: 1.0.0
runner:
  node:
    name: "@subql/node"
    version: 1.0.0
  query:
    name: "@subql/query"
    version: 0.24.0
description: >-
  This project can be use as a starting point for developing your SubQuery
  project
repository: "https://github.com/subquery/subql-starter"
schema:
  file: ./schema.graphql
network:
  genesisHash: "0xf37f31c4481e3c937ad40b672c561d0c0b1fb70b40e51a0d56dad30d60e4db58"
  endpoint: wss://pangoro-rpc.darwinia.network/
  dictionary: "https://api.subquery.network/sq/darwinia-network/pangoro-dictionary"
  chaintypes:
    file: ./types.yaml
dataSources:
  - kind: substrate/Runtime
    startBlock: 10
    mapping:
      file: ./dist/index.js
      handlers:
        # Staking Record
        - handler: handleStakingBondRingEvent
          kind: substrate/EventHandler
          filter:
            module: staking
            method: BondRing
        - handler: handleStakingRingBondedEvent
          kind: substrate/EventHandler
          filter:
            module: staking
            method: RingBonded
        - handler: handleStakingKtonBondedEvent
          kind: substrate/EventHandler
          filter:
            module: staking
            method: KtonBonded
        - handler: handleStakingBondKtonEvent
          kind: substrate/EventHandler
          filter:
            module: staking
            method: BondKton
        - handler: handleStakingRingUnbondedEvent
          kind: substrate/EventHandler
          filter:
            module: staking
            method: RingUnbonded
        - handler: handleStakingUnbondRingEvent
          kind: substrate/EventHandler
          filter:
            module: staking
            method: UnbondRing
        - handler: handleStakingKtonUnbondedEvent
          kind: substrate/EventHandler
          filter:
            module: staking
            method: KtonUnbonded
        - handler: handleStakingUnbondKtonEvent
          kind: substrate/EventHandler
          filter:
            module: staking
            method: UnbondKton
        - handler: handleTryClaimDepositsWithPunishCall
          kind: substrate/CallHandler
          filter:
            module: staking
            method: tryClaimDepositsWithPunish
            success: true
        # Fee Market
        - handler: handleMessagesDeliveredEvent
          kind: substrate/EventHandler
          filter:
            module: bridgeDarwiniaMessages
            method: MessagesDelivered
        - handler: handleFeeMarketUpdateRelayFeeEvent
          kind: substrate/EventHandler
          filter:
            module: feeMarket
            method: UpdateRelayFee
        - handler: handleFeeMarketSlashEvent
          kind: substrate/EventHandler
          filter:
            module: feeMarket
            method: FeeMarketSlash
        - handler: handleFeeMarketOrderCreatedEvent
          kind: substrate/EventHandler
          filter:
            module: feeMarket
            method: OrderCreated
        - handler: handleFeeMarketOrderRewardEvent
          kind: substrate/EventHandler
          filter:
            module: feeMarket
            method: OrderReward
